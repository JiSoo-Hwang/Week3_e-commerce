version: '3'

services:
  mysql:
    image: mysql:8.0
    container_name: mysql
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_USER: application
      MYSQL_PASSWORD: application
      MYSQL_DATABASE: hhplus
    volumes:
      - ./data/mysql/:/var/lib/mysql
  redis:
    image: redis:latest
    container_name: redis
    ports:
      - 6379:6379
    command: redis-server

  zookeeper:
    image: bitnami/zookeeper:3.9.2
    container_name: zookeeper
    hostname: zookeeper
    restart: always
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ALLOW_ANONYMOUS_LOGIN: "yes"
    networks:
      - kafka-cluster
    volumes:
      - zookeeper_data:/bitnami/zookeeper

  kafka-1:
    image: bitnami/kafka:3.7.0
    container_name: kafka-1
    hostname: kafka-1
    ports:
      - "10002:9094"
    environment:
      ALLOW_PLAINTEXT_LISTENER: "yes"
      KAFKA_ENABLE_KRAFT: "no"
      KAFKA_CFG_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_CFG_LISTENERS: "CLIENT://:9092,CONTROLLER://:9093,EXTERNAL://:9094"
      KAFKA_CFG_ADVERTISED_LISTENERS: "CLIENT://kafka-1:9092,EXTERNAL://localhost:10002"
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: "CONTROLLER:PLAINTEXT,CLIENT:PLAINTEXT,EXTERNAL:PLAINTEXT"
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: "CLIENT"
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: "true"
    networks:
      - kafka-cluster
    volumes:
      - kafka1_data:/bitnami/kafka

  kafka-2:
    image: bitnami/kafka:3.7.0
    container_name: kafka-2
    hostname: kafka-2
    ports:
      - "10003:9094"
    environment:
      ALLOW_PLAINTEXT_LISTENER: "yes"
      KAFKA_ENABLE_KRAFT: "no"
      KAFKA_CFG_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_CFG_LISTENERS: "CLIENT://:9092,CONTROLLER://:9093,EXTERNAL://:9094"
      KAFKA_CFG_ADVERTISED_LISTENERS: "CLIENT://kafka-2:9092,EXTERNAL://localhost:10003"
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: "CONTROLLER:PLAINTEXT,CLIENT:PLAINTEXT,EXTERNAL:PLAINTEXT"
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: "CLIENT"
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: "true"
    networks:
      - kafka-cluster
    volumes:
      - kafka2_data:/bitnami/kafka

  kafka-3:
    image: bitnami/kafka:3.7.0
    container_name: kafka-3
    hostname: kafka-3
    ports:
      - "10004:9094"
    environment:
      ALLOW_PLAINTEXT_LISTENER: "yes"
      KAFKA_ENABLE_KRAFT: "no"
      KAFKA_CFG_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_CFG_LISTENERS: "CLIENT://:9092,CONTROLLER://:9093,EXTERNAL://:9094"
      KAFKA_CFG_ADVERTISED_LISTENERS: "CLIENT://kafka-3:9092,EXTERNAL://localhost:10004"
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: "CONTROLLER:PLAINTEXT,CLIENT:PLAINTEXT,EXTERNAL:PLAINTEXT"
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: "CLIENT"
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: "true"
    networks:
      - kafka-cluster
    volumes:
      - kafka3_data:/bitnami/kafka

  kafka-ui:
    image: provectuslabs/kafka-ui:v0.7.2
    container_name: kafka-ui
    depends_on:
      - kafka-1
      - kafka-2
      - kafka-3
    ports:
      - "8888:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: "kafka-1:9092,kafka-2:9092,kafka-3:9092"
      DYNAMIC_CONFIG_ENABLED: "true"
    networks:
      - kafka-cluster

  # Elasticsearch: APM 데이터와 기타 로그를 저장하는 검색엔진
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.9.0
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
      - xpack.security.enabled=false
    ulimits:
      memlock:
        soft: -1
        hard: -1
    ports:
      - "9200:9200"
    volumes:
      - esdata:/usr/share/elasticsearch/data

  # Kibana: Elasticsearch 데이터를 시각화하는 대시보드
  kibana:
    image: docker.elastic.co/kibana/kibana:8.9.0
    container_name: kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch

  # APM Server: 애플리케이션 성능 데이터를 수집하여 Elasticsearch에 전송
  apm-server:
    image: docker.elastic.co/apm/apm-server:8.9.0
    container_name: apm-server
    command: >
      apm-server -e
      -E apm-server.host=0.0.0.0:8200
      -E output.elasticsearch.hosts=["http://elasticsearch:9200"]
    ports:
      - "8200:8200"
    depends_on:
      - elasticsearch

  # InfluxDB: k6 메트릭 저장소 (InfluxDB v1.x 사용)
  influxdb:
    image: influxdb:1.8
    container_name: influxdb
    ports:
      - "8086:8086"
    volumes:
      - influxdb_data:/var/lib/influxdb

  # Grafana: InfluxDB 메트릭 시각화 대시보드
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    depends_on:
      - influxdb
    volumes:
      - grafana_data:/var/lib/grafana

volumes:
  zookeeper_data:
  kafka1_data:
  kafka2_data:
  kafka3_data:
  esdata:
  influxdb_data:
  grafana_data:

networks:
  kafka-cluster:
    driver: bridge